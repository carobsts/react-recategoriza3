{"ast":null,"code":"var _jsxFileName = \"/home/cbustos/recategoriza3/src/Main/QrScanner.jsx\",\n    _s = $RefreshSig$();\n\nimport React, { useState } from 'react';\nimport QrReader from 'react-qr-scanner';\nimport { useHistory } from 'react-router';\nimport { useDisplaySize } from '../hooks/useDisplaySize';\nimport { paths } from '../Routes/paths';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\n\nconst QrScannerComponent = () => {\n  _s();\n\n  const history = useHistory();\n  const {\n    widthSize,\n    heightSize\n  } = useDisplaySize();\n  const [result, setResult] = useState();\n\n  function handleScan(data) {\n    setResult(data);\n  }\n\n  ;\n  const previewStyle = {\n    height: heightSize,\n    width: widthSize\n  };\n\n  if (result) {\n    let code = result.text.split('=')[1];\n    let decode = atob(code);\n    let localStore = localStorage.getItem('data') ? JSON.parse(localStorage.getItem('data')) : [];\n    localStore.push(JSON.parse(decode));\n    localStorage.setItem('data', JSON.stringify(localStore));\n    history.push(paths.main);\n  }\n\n  ;\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: /*#__PURE__*/_jsxDEV(QrReader, {\n      facingMode: \"rear\",\n      style: previewStyle,\n      onScan: handleScan\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 33,\n    columnNumber: 7\n  }, this);\n};\n\n_s(QrScannerComponent, \"gyou3SPo7Lpf128M+8c5MukB8b8=\", false, function () {\n  return [useHistory, useDisplaySize];\n});\n\n_c = QrScannerComponent;\n\nconst QrPage = () => {\n  return /*#__PURE__*/_jsxDEV(QrScannerComponent, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 45,\n    columnNumber: 9\n  }, this);\n};\n\n_c2 = QrPage;\nexport default QrPage;\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"QrScannerComponent\");\n$RefreshReg$(_c2, \"QrPage\");","map":{"version":3,"sources":["/home/cbustos/recategoriza3/src/Main/QrScanner.jsx"],"names":["React","useState","QrReader","useHistory","useDisplaySize","paths","QrScannerComponent","history","widthSize","heightSize","result","setResult","handleScan","data","previewStyle","height","width","code","text","split","decode","atob","localStore","localStorage","getItem","JSON","parse","push","setItem","stringify","main","QrPage"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,QAAhB,QAAgC,OAAhC;AACA,OAAOC,QAAP,MAAqB,kBAArB;AACA,SAASC,UAAT,QAA2B,cAA3B;AACA,SAASC,cAAT,QAA+B,yBAA/B;AACA,SAASC,KAAT,QAAsB,iBAAtB;;;AAEA,MAAMC,kBAAkB,GAAG,MAAM;AAAA;;AAE7B,QAAMC,OAAO,GAAGJ,UAAU,EAA1B;AAEA,QAAM;AAAEK,IAAAA,SAAF;AAAaC,IAAAA;AAAb,MAA4BL,cAAc,EAAhD;AACA,QAAM,CAAEM,MAAF,EAAUC,SAAV,IAAwBV,QAAQ,EAAtC;;AAEA,WAASW,UAAT,CAAoBC,IAApB,EAA0B;AACvBF,IAAAA,SAAS,CAACE,IAAD,CAAT;AACF;;AAAA;AAED,QAAMC,YAAY,GAAG;AACjBC,IAAAA,MAAM,EAAEN,UADS;AAEjBO,IAAAA,KAAK,EAAER;AAFU,GAArB;;AAKA,MAAIE,MAAJ,EAAY;AACR,QAAIO,IAAI,GAAGP,MAAM,CAACQ,IAAP,CAAYC,KAAZ,CAAkB,GAAlB,EAAuB,CAAvB,CAAX;AACA,QAAIC,MAAM,GAAGC,IAAI,CAACJ,IAAD,CAAjB;AACA,QAAIK,UAAU,GAAGC,YAAY,CAACC,OAAb,CAAqB,MAArB,IAA+BC,IAAI,CAACC,KAAL,CAAWH,YAAY,CAACC,OAAb,CAAqB,MAArB,CAAX,CAA/B,GAA0E,EAA3F;AACAF,IAAAA,UAAU,CAACK,IAAX,CAAgBF,IAAI,CAACC,KAAL,CAAWN,MAAX,CAAhB;AACAG,IAAAA,YAAY,CAACK,OAAb,CAAqB,MAArB,EAA6BH,IAAI,CAACI,SAAL,CAAeP,UAAf,CAA7B;AACAf,IAAAA,OAAO,CAACoB,IAAR,CAAatB,KAAK,CAACyB,IAAnB;AACH;;AAAA;AAED,sBACE;AAAA,2BACE,QAAC,QAAD;AACE,MAAA,UAAU,EAAC,MADb;AAEE,MAAA,KAAK,EAAEhB,YAFT;AAGE,MAAA,MAAM,EAAEF;AAHV;AAAA;AAAA;AAAA;AAAA;AADF;AAAA;AAAA;AAAA;AAAA,UADF;AASH,CAlCD;;GAAMN,kB;UAEcH,U,EAEkBC,c;;;KAJhCE,kB;;AAoCN,MAAMyB,MAAM,GAAG,MAAM;AACjB,sBACI,QAAC,kBAAD;AAAA;AAAA;AAAA;AAAA,UADJ;AAGH,CAJD;;MAAMA,M;AAMN,eAAeA,MAAf","sourcesContent":["import React, { useState } from 'react'\nimport QrReader from 'react-qr-scanner'\nimport { useHistory } from 'react-router';\nimport { useDisplaySize } from '../hooks/useDisplaySize';\nimport { paths } from '../Routes/paths';\n\nconst QrScannerComponent = () => {\n\n    const history = useHistory();\n\n    const { widthSize, heightSize } = useDisplaySize();\n    const [ result, setResult ] = useState();\n  \n    function handleScan(data) {\n       setResult(data);\n    };\n\n    const previewStyle = {\n        height: heightSize,\n        width: widthSize,\n    };\n\n    if (result) {\n        let code = result.text.split('=')[1];\n        let decode = atob(code);\n        let localStore = localStorage.getItem('data') ? JSON.parse(localStorage.getItem('data')) : [];\n        localStore.push(JSON.parse(decode));\n        localStorage.setItem('data', JSON.stringify(localStore));\n        history.push(paths.main);\n    };\n\n    return(\n      <div>\n        <QrReader\n          facingMode=\"rear\"\n          style={previewStyle}\n          onScan={handleScan}\n        />\n      </div>\n    )\n};\n\nconst QrPage = () => {\n    return (\n        <QrScannerComponent/>\n    )\n};\n\nexport default QrPage;"]},"metadata":{},"sourceType":"module"}